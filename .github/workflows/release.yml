name: Publish release

on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: Release Version. e.g., 0.1.8.64
        required: true
        type: string
      nextDevVersion:
        description: Next Dev Version. e.g., 0.1.8.65-SNAPSHOT
        required: true
        type: string

permissions:
  contents: write

jobs:
  compute-cache-key:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.compute.outputs.cache-key }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - id: compute
        run: |
          HASH=$(sha256sum .github/nms-groups.yml | cut -c1-16)
          echo "cache-key=nms-cache-${HASH}" >> "$GITHUB_OUTPUT"

  nms-cache:
    needs: compute-cache-key
    uses: ./.github/workflows/build-nms.yml
    with:
      groups-file: .github/nms-groups.yml
      cache-key: ${{ needs.compute-cache-key.outputs.cache-key }}

  build-release-deploy:
    needs: [compute-cache-key, nms-cache]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      TIMEOUT_SECONDS: 3600
      MAVEN_GPG_FINGERPRINT: 6C063BAA00065DFED08D7CD6B21CB73DBBF60FE5
      MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
      RELEASE_VERSION: ${{ inputs.releaseVersion }}
      NEXT_DEV_VERSION: ${{ inputs.nextDevVersion }}
      GIT_AUTHOR_NAME: PimvanderLoos
      GIT_AUTHOR_EMAIL: 3114723+PimvanderLoos@users.noreply.github.com
      GIT_COMMITTER_NAME: PimvanderLoos
      GIT_COMMITTER_EMAIL: 3114723+PimvanderLoos@users.noreply.github.com
      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Configure Git identity + sign commits & tags
        run: |
          git config --global user.name "${GIT_AUTHOR_NAME}"
          git config --global user.email "${GIT_AUTHOR_EMAIL}"
          git config --global user.signingkey ${MAVEN_GPG_FINGERPRINT}
          git config --global commit.gpgsign true
          git config --global tag.gpgSign true
          
          install -d -m 700 ~/.gnupg
          cat <<'EOF' >> ~/.gnupg/gpg.conf
          pinentry-mode loopback
          EOF
          
          cat <<'EOF' >> ~/.gnupg/gpg-agent.conf
          allow-loopback-pinentry
          default-cache-ttl-ssh ${TIMEOUT_SECONDS}
          max-cache-ttl-ssh ${TIMEOUT_SECONDS}
          EOF
          
          chmod 600 ~/.gnupg/gpg.conf ~/.gnupg/gpg-agent.conf
          gpg-connect-agent reloadagent /bye
          
          install -d ~/bin
          cat <<'EOF' > ~/bin/gpg-loopback
          #!/usr/bin/env bash
          exec gpg --batch --pinentry-mode loopback --passphrase "$MAVEN_GPG_PASSPHRASE" "$@"
          EOF
          
          chmod +x ~/bin/gpg-loopback
          git config --global gpg.program "$HOME/bin/gpg-loopback"

      - name: Set up JDK 21 + GPG
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5.0.0
        with:
          distribution: temurin
          java-version: 21
          cache: maven
          gpg-private-key: ${{ secrets.MAVEN_GPG_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
          server-id: |
            eldonexus-releases
            eldonexus-snapshots
          server-username: |
            NEXUS_USERNAME
            NEXUS_USERNAME
          server-password: |
            NEXUS_PASSWORD
            NEXUS_PASSWORD

      - name: Restore NMS Maven cache
        uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          fail-on-cache-miss: true
          key: ${{ needs.compute-cache-key.outputs.cache-key }}
          restore-keys: |
            nms-cache-
          path: |
            ~/.m2/repository/org/spigotmc/spigot
            ~/.m2/repository/org/spigotmc/spigot-parent
            ~/.m2/repository/net/md-5

      - name: Prepare release (tag, bump version, commit)
        run: |
          mvn --batch-mode --show-version --no-transfer-progress \
            -DreleaseVersion='${RELEASE_VERSION}' \
            -DdevelopmentVersion='${NEXT_DEV_VERSION}' \
            -DsignTag=true \
            -Darguments="-Psign,release -Dgpg.keyname=${MAVEN_GPG_FINGERPRINT}" \
            -DignoreSnapshots=true \
            -Prelease \
            release:prepare

      - name: Perform release (build + deploy to Nexus)
        run: |
          mvn --batch-mode --show-version --no-transfer-progress \
            -Darguments="-Psign,release -Dgpg.keyname=${MAVEN_GPG_FINGERPRINT}" \
            -DignoreSnapshots=true \
            -Prelease \
            release:perform

      - name: Push release commits and tag
        run: git push origin master --follow-tags

      - name: Upload build artifacts (JARs + .asc)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: BigDoors-${{ github.sha }}
          if-no-files-found: error
          path: |
            core/target/BigDoors*

      - name: Resolve release notes path
        id: notes
        run: |
          if [ -s NEXT_RELEASE_CHANGELOG.md ]; then
            echo "body_path=NEXT_RELEASE_CHANGELOG.md" >> "$GITHUB_OUTPUT"
          fi

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
        with:
          tag_name: v${{ env.RELEASE_VERSION }}
          body_path: ${{ steps.notes.outputs.body_path }}
          generate_release_notes: ${{ steps.notes.outputs.body_path == '' && 'true' || 'false' }}
          files: |
            core/target/BigDoors.jar
            core/target/BigDoors.jar.asc
            core/target/BigDoors.jar.SHA-256

      - name: Clear changelog for next release
        env:
          GPG_KEY: ${{ secrets.MAVEN_GPG_KEY }}
          Maven_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        run: |
          echo "$GPG_KEY" | gpg --batch --import
          
          version_line=$(echo "${{ env.RELEASE_VERSION }}" | sed 's/-SNAPSHOT//g')
          { printf '%s\n\n' "$version_line"; cat changelog.txt; } > changelog.tmp
          mv changelog.tmp changelog.txt
          
          > NEXT_RELEASE_CHANGELOG.md
          
          git add changelog.txt NEXT_RELEASE_CHANGELOG.md
          git commit -S -m "chore: clear next changelog after v${{ env.RELEASE_VERSION }} release"
          git push origin master
